/**************************************************************************//**
 *
 * \file   matdatasrc.cc
 * \author Daniel Strigl, Klaus Kofler
 * \date   Jul 11 2009
 *
 * $Id$
 *
 * \brief  Implementation of cnnplus::MatDataSrc.
 *
 *****************************************************************************/

#include "matdatasrc.hh"
#include "error.hh"
#include <sstream>
#include <algorithm>
#include <cstring>
#include <mat.h>

static bool
checkArr(mxArray const * arr, mwSize const ndims, mwSize const * dims = NULL)
{
    if (!arr) return false;
    if (!mxIsDouble(arr)) return false;
    if (mxIsComplex(arr)) return false;
    if (mxGetNumberOfDimensions(arr) != ndims) return false;
    if (dims) {
        for (mwSize i = 0; i < ndims; ++i) {
            if (mxGetDimensions(arr)[i] != dims[i]) return false;
        }
    }
    return true;
}

CNNPLUS_NS_BEGIN

template<typename T>
MatDataSrc<T>::MatDataSrc(T const dataRangeMin, T const dataRangeMax)
    : DataSource<T>(dataRangeMin, dataRangeMax),
    filename_(), patternSize_(), idx_(), patterns_(NULL), labels_(NULL)
{}

template<typename T> void
MatDataSrc<T>::load(std::string const & filename,
    std::string const & patArrName, std::string const & labArrName)
{
    unload();

    MATFile * matFile = NULL;
    mxArray * arrX = NULL, * arrD = NULL;

    try {
        if (!(matFile = matOpen(filename.c_str(), "r")))
            throw MatlabError("Failed to open '" + filename + "'.");

        arrX = matGetVariable(matFile, patArrName.c_str());
        {
            if (!checkArr(arrX, 3))
                throw MatlabError("Failed to read '" + patArrName + "'.");
            patternSize_.set(
                mxGetDimensions(arrX)[0], mxGetDimensions(arrX)[1]);
            this->size_ = mxGetDimensions(arrX)[2];
        }
        arrD = matGetVariable(matFile, labArrName.c_str());
        {
            mwSize const dims[] = { 1, this->size_ };
            if (!checkArr(arrD, countof(dims), dims))
                throw MatlabError("Failed to read '" + labArrName + "'.");
        }

        // Allocate memory
        patterns_ = static_cast<T   *>(malloc(this->size_ * patternSize_.area() * sizeof(T)));
        labels_   = static_cast<int *>(malloc(this->size_ * sizeof(int)));

        double const * pArrX = static_cast<double const *>(mxGetData(arrX));
        double const * pArrD = static_cast<double const *>(mxGetData(arrD));

        for (int i = 0; i < this->size_; ++i, pArrX += patternSize_.area(), ++pArrD)
        {
            T * ptr = patterns_ + i * patternSize_.area();

            for (size_t r = 0; r < patternSize_.height(); ++r) {
                for (size_t c = 0; c < patternSize_.width(); ++c) {
                    *ptr++ = static_cast<T>(pArrX[c * patternSize_.height() + r]);
                }
            }

            labels_[i] = static_cast<int>(*pArrD);
        }
    }
    catch (...) {
        if (arrX) mxDestroyArray(arrX);
        if (arrD) mxDestroyArray(arrD);
        if (matFile) matClose(matFile);
        unload();
        throw;
    }

    mxDestroyArray(arrX);
    mxDestroyArray(arrD);
    matClose(matFile);
    filename_ = filename;

    reset();
    this->curPos_ = 0;
}

template<typename T> void
MatDataSrc<T>::unload() throw()
{
    // Deallocate memory
    if (patterns_) free(patterns_); patterns_ = NULL;
    if (labels_)   free(labels_);   labels_   = NULL;

    filename_.clear(); patternSize_.clear(); idx_.clear();
    this->size_ = this->curPos_ = -1;
}

template<typename T> int
MatDataSrc<T>::fprop(T * out)
{
    CNNPLUS_ASSERT(out);
    if (!patterns_ || !labels_) throw DataSourceError("No data loaded.");

    // Copy pattern data to 'out' vector and return label
    memcpy(out, patterns_ + idx_[this->curPos_] * patternSize_.area(),
        patternSize_.area() * sizeof(T));
    return labels_[idx_[this->curPos_]];
}

template<typename T> int
MatDataSrc<T>::seek(int const pos)
{
    if (pos < 0 || pos >= this->size_) {
        std::stringstream ss;
        ss << "must be between 0 and " << (this->size_ - 1) << ".";
        throw ParameterError("pos", ss.str());
    }

    int const oldPos = this->curPos_;
    this->curPos_ = pos;
    return oldPos;
}

template<typename T> void
MatDataSrc<T>::shuffle()
{
    std::random_shuffle(idx_.begin(), idx_.end());
}

template<typename T> void
MatDataSrc<T>::shift(int dist)
{
    if (this->size_ > 0) {
        while (dist < 0) dist += this->size_;
        for (int i = 0; i < this->size_; ++i)
            idx_[i] = (idx_[i] + dist) % this->size_;
    }
}

template<typename T> void
MatDataSrc<T>::reset()
{
    if (this->size_ > 0) {
        idx_.resize(this->size_);
        for (int i = 0; i < this->size_; ++i)
            idx_[i] = i;
    }
}

template<typename T> size_t
MatDataSrc<T>::sizeOut() const
{
    return patternSize_.area();
}

template<typename T> Size
MatDataSrc<T>::sizePattern() const
{
    return patternSize_;
}

template<typename T> int
MatDataSrc<T>::idx(int pos) const
{
    pos = (pos < 0) ? this->curPos_ : pos;

    if (pos < 0 || pos >= this->size_) {
        std::stringstream ss;
        ss << "must be between 0 and " << (this->size_ - 1) << ".";
        throw ParameterError("pos", ss.str());
    }

    return idx_[pos];
}

template<typename T> std::string
MatDataSrc<T>::toString() const
{
    std::stringstream ss;
    ss << "MatDataSrc(\""
        << filename_ << "\"; "
        << "dataRange=[" << this->dataRangeMin_ << "," << this->dataRangeMax_ << "], "
        << "size=" << this->size_ << ")";
    return ss.str();
}

/*! \addtogroup eti_grp Explicit Template Instantiation
 @{
 */
template class MatDataSrc<float>;
template class MatDataSrc<double>;
/*! @} */

CNNPLUS_NS_END
